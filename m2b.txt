"""
Module 2b (B2) for exam 2024-08-21
"""

import math
from m2tokenizer import Tokenizer

### Global constants

INIT_FILE = "m2binit.txt"


class Operator:
    def __init__(self, name:str, left, right):
        """ 
            name:  Name of the operator i.e. '+', '-', '*', '/'
            left:  The tree node that is the left operand
            right: The tree node that is the right operand
        """
        pass

    def __str__(self):  
        # To be modified in task 
        return str(self.left) + self.name + str(self.right)

    def evaluate(self, variables):
        # To be completed
        pass

class Variable:
    def __init__(self, name):
        self.name = name
        self.prio = 100

    def __str__(self):
        return self.name

    def evaluate(self, variables):
        pass


class Constant:
    def __init__(self, value):
        self.value = value
        self.prio = 100

    def __str__(self):
        return str(self.value)

    def evaluate(self, variables):
        return self.value


class EvaluationError(Exception):
    def __init__(self, arg):
        self.arg = arg
        super().__init__(self.arg)


### The parser to be modified

class SyntaxError(Exception):
    def __init__(self, arg):
        self.arg = arg
        super().__init__(self.arg)


### Several of the following parser functions have to be modified ###
### The given code works in the same way as the original calculator ###

def statement(wtok, variables):
    """ See syntax diagram for statement"""
    result = assignment(wtok, variables)
    if wtok.is_at_end() == False:
        raise SyntaxError('Expected end of line')
    return result


def assignment(wtok, variables):
    """ See syntax diagram for assignment"""
    result = expression(wtok, variables)
    while wtok.get_current() == '=':
        wtok.next()
        if wtok.is_name():
            variables[wtok.get_current()] = result
        else:
            raise SyntaxError("Expected name after '=' ")
        wtok.next()
    return result


def expression(wtok, variables):
    """ See syntax diagram for expression"""
    result = term(wtok, variables)
    while wtok.get_current() in ('+', '-'):
        oper = wtok.get_current()
        wtok.next()
        if oper == '+':
            result = result + term(wtok, variables)
        else:
            result = result - term(wtok, variables)
    return result


def term(wtok, variables):
    """ See syntax diagram for term"""
    result = factor(wtok, variables)
    while wtok.get_current() in ('*', '/'):
        oper = wtok.get_current()
        wtok.next()
        if oper == '*':
            result = result * factor(wtok, variables)
        else:
            try:
                result = result / factor(wtok, variables)
            except ZeroDivisionError:
                raise EvaluationError("Division by zero")
    return result


def factor(wtok, variables):
    """ See syntax diagram for factor"""
    if wtok.get_current() == '(':
        wtok.next()
        result = assignment(wtok, variables)
        if wtok.get_current() != ')':
            raise SyntaxError("Expected ')'")
        else:
            wtok.next()
    elif wtok.is_name():
        if wtok.get_current() in variables:
            result = variables[wtok.get_current()]
            wtok.next()
        else:
            raise EvaluationError(
                f"Undefined variable: '{wtok.get_current()}'")
    elif wtok.is_number():
        result = float(wtok.get_current())
        if result.is_integer():
            result = int(result)
        wtok.next()

    else:
        raise SyntaxError(
            "Expected number, word or '('")

    return result

def vars_print(variables):
    for name, value in sorted(variables.items()):
        print(f"   {name:<5} : {value}")


def B2():
    """
    Handles:
       the iteration over input lines,
       the commands 'quit' and 'vars' and
       catches raised exceptions.
    Starts with reading the init file
    """

    print("Numerical calculator")
    variables = {"ans": 0.0, "E": math.e, "PI": math.pi}


    lines_from_file = ''
    try:
        with open(INIT_FILE, 'r') as file:
            lines_from_file = file.readlines()
    except FileNotFoundError:
        pass

    while True:
        if lines_from_file:
            line = lines_from_file.pop(0).strip()
            print('\ninit  :', line)
        else:
            line = input('\nInput : ')
        if line == '' or line[0] == '#':
            continue
        wtok = Tokenizer(line)
        if wtok.get_current() == 'vars':
            vars_print(variables)
        elif wtok.get_current() in ('q','quit'):
            print('Bye')
            exit()
        else:
            try:
                result = statement(wtok, variables)
                print('Parsed:', str(result))
                # The following two lines have to be changed <<<<<<<<<<<<<<<<
                variables['ans'] = result
                print('Result:', result) 
            except EvaluationError as ee:
                print("*** Evaluation error: ", ee)

            except SyntaxError as se:
                print("*** Syntax error: ", se)
                print(
                    f"Error occurred at '{wtok.get_current()}' just after '{wtok.get_previous()}'")




if __name__ == "__main__":
    B2()



