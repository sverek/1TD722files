"""
Module 2a (A3 and A4) for exam 2024-08-21
"""

import math
from m2tokenizer import Tokenizer


### A3, A4 START ###

### Global constants

INIT_FILE = "m2init.txt"

FUNCTIONS_1 = {  # Functions with a single argument
    "sin": math.sin,
    "cos": math.cos,
    "exp": math.exp,
    "log": math.log,
}

FUNCTIONS_N = {
    "max": max,
    "min": min,
    "sum": sum,
    "mean": (lambda lst: sum(lst)/len(lst)),
}

PREDEFINED = {"ans": 0, "E": math.e, "PI": math.pi}


class EvaluationError(Exception):
    def __init__(self, arg):
        self.arg = arg
        super().__init__(self.arg)


class SyntaxError(Exception):
    def __init__(self, arg):
        self.arg = arg
        super().__init__(self.arg)



def statement(wtok, variables):
    """See syntax diagram for statement"""
    result = assignment(wtok, variables)
    if wtok.is_at_end():
        return result
    else:
        raise SyntaxError("Expected end of line")

def assignment(wtok, variables):
    """See syntax diagram for assignment"""
    result = expression(wtok, variables)
    if wtok.get_current() == "=":
        wtok.next()
        if wtok.is_name():
            variables[wtok.get_current()] = result
            wtok.next() 
        else:
            raise SyntaxError("Expected name after '=' ")
    return result

def expression(wtok, variables):
    """See syntax diagram for expression"""
    result = term(wtok, variables)
    while wtok.get_current() in ("+", "-"):
        if wtok.get_current() == "+":
            wtok.next()
            temp = term(wtok, variables)
            result = result + temp
        else:
            wtok.next()
            result = result - term(wtok, variables)
    return result

def term(wtok, variables):
    """See syntax diagram for term"""
    result = factor(wtok, variables)
    while wtok.get_current() in ("*", "/"):
        op = wtok.get_current()
        wtok.next()
        if op == "*":
            result = result * factor(wtok, variables)
        else:
            try:
                result = result / factor(wtok, variables)
            except ZeroDivisionError:
                raise EvaluationError("Division by zero")
    return result

def factor(wtok, variables):
    """See syntax diagram for factor"""
    if wtok.get_current() == "(":
        wtok.next()
        result = assignment(wtok, variables)
        if wtok.get_current() != ")":
            raise SyntaxError("Expected ')'")
        else:
            wtok.next()
    elif wtok.get_current() in FUNCTIONS_1:
        func = wtok.get_current()
        if wtok.get_current() == "(":
            try:
                result = FUNCTIONS_1[func](factor(wtok, variables))
            except ValueError:
                raise EvaluationError(f"Illegal argument to {func}")
        else:
            raise SyntaxError("Expected '(' after function name")
        
    elif wtok.get_current() in FUNCTIONS_N:
        func = wtok.get_current()
        wtok.next()
        args = arglist(wtok, variables)
        result = FUNCTIONS_N[func](args)

    elif wtok.is_name():
        if wtok.get_current() in variables:
            result = variables[wtok.get_current()]
            wtok.next()
        else:
            raise EvaluationError(f"Undefined variable: '{wtok.get_current()}'")

    elif wtok.is_number():
        val = wtok.get_current()
        result = float(val) if '.' in val else int(val)
        wtok.next()

    elif wtok.get_current() == "-":
        wtok.next()
        result = -factor(wtok, variables)

    else:
        raise SyntaxError("Expected number, word or '('")

    return result

def arglist(wtok, variables):   # A4
    raise SyntaxError("Task A4 not yet implemented")


def vars_print(variables):
    for name, value in sorted(variables.items()):
        print(f"   {name:<5} : {value}")


def A3_A4():
    """
    Handles:
       the iteration over input lines,
       the commands 'quit' and 'vars' and
       catches raised exceptions.
    Starts with reading the init file
    """

    print("\n\nM2: Numerical calculator with task A3 and A4")

    variables = PREDEFINED

    lines_from_file = ""
    try:
        with open(INIT_FILE, "r") as file:
            lines_from_file = file.readlines()
    except FileNotFoundError:
        pass

    while True:
        if lines_from_file:
            line = lines_from_file.pop(0).strip()
            if line != "":
                print("\ninit  :", line)
            else:
                print()
        else:
            line = input("\nInput : ")
        if line == "" or line[0] == "#":
            continue
        wtok = Tokenizer(line)
        if wtok.get_current() == "vars":
            vars_print(variables)
        elif wtok.get_current() in ("quit", "q", "exit"):
            print("Bye")
            return
        else:
            try:
                result = statement(wtok, variables)
                variables["ans"] = result
                print(f"Result: {result}")

            except EvaluationError as ee:
                print("*** Evaluation error:", ee)

            except SyntaxError as se:
                print("*** Syntax error: ", se)
                print(
                    f"Error occurred at '{wtok.get_current()}' just after '{wtok.get_previous()}'"
                )


### A3, A4 STOP ###

if __name__ == "__main__":
    A3_A4()
